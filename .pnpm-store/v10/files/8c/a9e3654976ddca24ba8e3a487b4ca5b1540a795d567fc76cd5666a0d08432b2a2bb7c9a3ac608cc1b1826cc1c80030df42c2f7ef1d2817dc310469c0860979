declare const _default: "# Overview\n\n**TanStack Router is a router for building React and Solid applications**. Some of its features include:\n\n- 100% inferred TypeScript support\n- Typesafe navigation\n- Nested Routing and layout routes (with pathless layouts)\n- Built-in Route Loaders w/ SWR Caching\n- Designed for client-side data caches (TanStack Query, SWR, etc.)\n- Automatic route prefetching\n- Asynchronous route elements and error boundaries\n- File-based Route Generation\n- Typesafe JSON-first Search Params state management APIs\n- Path and Search Parameter Schema Validation\n- Search Param Navigation APIs\n- Custom Search Param parser/serializer support\n- Search param middleware\n- Route matching/loading middleware\n\nTo get started quickly, head to the next page. For a more lengthy explanation, buckle up while I bring you up to speed!\n\n## \"A Fork in the Route\"\n\nUsing a router to build applications is widely regarded as a must-have and is usually one of the first choices you\u2019ll make in your tech stack.\n\n[//]: # 'WhyChooseTanStackRouter'\n\n**So, why should you choose TanStack Router over another router?**\n\nTo answer this question, we need to look at the other options in the space. There are many if you look hard enough, but in my experience, only a couple are worth exploring seriously:\n\n- **Next.js** - Widely regarded as the de facto framework for starting a new React project, it\u2019s laser focused on performance, workflow, and bleeding edge technology. Its APIs and abstractions are powerful, but can sometimes come across as non-standard. Its extremely fast growth and adoption in the industry has resulted in a featured packed experience, but at the expense of feeling overwhelming and sometimes bloated.\n- **Remix / React Router** - A full-stack framework based on the historically successful React Router offers a similarly powerful developer and user experience, with APIs and vision based firmly on web standards like Request/Response and a focus on running anywhere JS can run. Many of its APIs and abstractions are wonderfully designed and were inspiration for more than a few TanStack Router APIs. That said, its rigid design, bolted-on type safety and sometimes strict over-adherence to platform APIs can leave some developers wanting more.\n\nBoth of these frameworks (and their routers) are great, and I can personally attest that both are very good solutions for building React applications. My experience has also taught me that these solutions could also be much better, especially around the actual routing APIs that are available to developers to make their apps faster, easier, and more enjoyable to work with.\n\nIt's probably no surprise at this point that picking a router is so important that it is often tied 1-to-1 with your choice of framework, since most frameworks rely on a specific router.\n\n[//]: # 'WhyChooseTanStackRouter'\n\n**Does this mean that TanStack Router is a framework?**\n\nTanStack Router itself is not a \"framework\" in the traditional sense, since it doesn't address a few other common full-stack concerns. However TanStack Router has been designed to be upgradable to a full-stack framework when used in conjunction with other tools that address bundling, deployments, and server-side-specific functionality. This is why we are currently developing [TanStack Start](https://tanstack.com/start), a full-stack framework that is built on top of TanStack Router and Vite.\n\nFor a deeper dive on the history of TanStack Router, feel free to read [TanStack Router's History](../decisions-on-dx.md#tanstack-routers-origin-story).\n\n## Why TanStack Router?\n\nTanStack Router delivers on the same fundamental expectations as other routers that you\u2019ve come to expect:\n\n- Nested routes, layout routes, grouped routes\n- File-based Routing\n- Parallel data loading\n- Prefetching\n- URL Path Params\n- Error Boundaries and Handling\n- SSR\n- Route Masking\n\nAnd it also delivers some new features that raise the bar:\n\n- 100% inferred TypeScript support\n- Typesafe navigation\n- Built-in SWR Caching for loaders\n- Designed for client-side data caches (TanStack Query, SWR, etc.)\n- Typesafe JSON-first Search Params state management APIs\n- Path and Search Parameter Schema Validation\n- Search Parameter Navigation APIs\n- Custom Search Param parser/serializer support\n- Search param middleware\n- Inherited Route Context\n- Mixed file-based and code-based routing\n\nLet\u2019s dive into some of the more important ones in more detail!\n\n## 100% Inferred TypeScript Support\n\nEverything these days is written \u201Cin Typescript\u201D or at the very least offers type definitions that are veneered over runtime functionality, but too few packages in the ecosystem actually design their APIs with TypeScript in mind. So while I\u2019m pleased that your router is auto-completing your option fields and catching a few property/method typos here and there, there is much more to be had.\n\n- TanStack Router is fully aware of all of your routes and their configuration at any given point in your code. This includes the path, path params, search params, context, and any other configuration you\u2019ve provided. Ultimately this means that you can navigate to any route in your app with 100% type safety and confidence that your link or navigate call will succeed.\n- TanStack Router provides lossless type-inference. It uses countless generic type parameters to enforce and propagate any type information you give it throughout the rest of its API and ultimately your app. No other router offers this level of type safety and developer confidence.\n\nWhat does all of that mean for you?\n\n- Faster feature development with auto-completion and type hints\n- Safer and faster refactors\n- Confidence that your code will work as expected\n\n## 1st Class Search Parameters\n\nSearch parameters are often an afterthought, treated like a black box of strings (or string) that you can parse and update, but not much else. Existing solutions are **not** type-safe either, adding to the caution that is required to deal with them. Even the most \"modern\" frameworks and routers leave it up to you to figure out how to manage this state. Sometimes they'll parse the search string into an object for you, or sometimes you're left to do it yourself with `URLSearchParams`.\n\nLet's step back and remember that **search params are the most powerful state manager in your entire application.** They are global, serializable, bookmarkable, and shareable making them the perfect place to store any kind of state that needs to survive a page refresh or a social share.\n\nTo live up to that responsibility, search parameters are a first-class citizen in TanStack Router. While still based on standard URLSearchParams, TanStack Router uses a powerful parser/serializer to manage deeper and more complex data structures in your search params, all while keeping them type-safe and easy to work with.\n\n**It's like having `useState` right in the URL!**\n\nSearch parameters are:\n\n- Automatically parsed and serialized as JSON\n- Validated and typed\n- Inherited from parent routes\n- Accessible in loaders, components, and hooks\n- Easily modified with the useSearch hook, Link, navigate, and router.navigate APIs\n- Customizable with a custom search filters and middleware\n- Subscribed via fine-grained search param selectors for efficient re-renders\n\nOnce you start using TanStack Router's search parameters, you'll wonder how you ever lived without them.\n\n## Built-In Caching and Friendly Data Loading\n\nData loading is a critical part of any application and while most existing routers offer some form of critical data loading APIs, they often fall short when it comes to caching and data lifecycle management. Existing solutions suffer from a few common problems:\n\n- No caching at all. Data is always fresh, but your users are left waiting for frequently accessed data to load over and over again.\n- Overly-aggressive caching. Data is cached for too long, leading to stale data and a poor user experience.\n- Blunt invalidation strategies and APIs. Data may be invalidated too often, leading to unnecessary network requests and wasted resources, or you may not have any fine-grained control over when data is invalidated at all.\n\nTanStack Router solves these problems with a two-prong approach to caching and data loading:\n\n### Built-in Cache\n\nTanStack Router provides a light-weight built-in caching layer that works seamlessly with the Router. This caching layer is loosely based on TanStack Query, but with fewer features and a much smaller API surface area. Like TanStack Query, sane but powerful defaults guarantee that your data is cached for reuse, invalidated when necessary, and garbage collected when not in use. It also provides a simple API for invalidating the cache manually when needed.\n\n### Flexible & Powerful Data Lifecycle APIs\n\nTanStack Router is designed with a flexible and powerful data loading API that more easily integrates with existing data fetching libraries like TanStack Query, SWR, Apollo, Relay, or even your own custom data fetching solution. Configurable APIs like `context`, `beforeLoad`, `loaderDeps` and `loader` work in unison to make it easy to define declarative data dependencies, prefetch data, and manage the lifecycle of an external data source with ease.\n\n## Inherited Route Context\n\nTanStack Router's router and route context is a powerful feature that allows you to define context that is specific to a route which is then inherited by all child routes. Even the router and root routes themselves can provide context. Context can be built up both synchronously and asynchronously, and can be used to share data, configuration, or even functions between routes and route configurations. This is especially useful for scenarios like:\n\n- Authentication and Authorization\n- Hybrid SSR/CSR data fetching and preloading\n- Theming\n- Singletons and global utilities\n- Curried or partial application across preloading, loading, and rendering stages\n\nAlso, what would route context be if it weren't type-safe? TanStack Router's route context is fully type-safe and inferred at zero cost to you.\n\n## File-based and/or Code-Based Routing\n\nTanStack Router supports both file-based and code-based routing at the same time. This flexibility allows you to choose the approach that best fits your project's needs.\n\nTanStack Router's file-based routing approach is uniquely user-facing. Route configuration is generated for you either by the Vite plugin or TanStack Router CLI, leaving the usage of said generated code up to you! This means that you're always in total control of your routes and router, even if you use file-based routing.\n\n## Acknowledgements\n\nTanStack Router builds on concepts and patterns popularized by many other OSS projects, including:\n\n- [TRPC](https://trpc.io/)\n- [Remix](https://remix.run)\n- [Chicane](https://swan-io.github.io/chicane/)\n- [Next.js](https://nextjs.org)\n\nWe acknowledge the investment, risk and research that went into their development, but are excited to push the bar they have set even higher.\n\n## Let's go!\n\nEnough overview, there's so much more to do with TanStack Router. Hit that next button and let's get started!\n\n# Quick Start\n\nTanStack Router can be quickly added to any existing React project or used to scaffold a new one.\n\n## TanStack Router Installation\n\n### Requirements\n\nBefore installing TanStack router, please ensure your project meets the following requirements:\n\n[//]: # 'Requirements'\n\n- `react` v18 or later with `createRoot` support.\n- `react-dom` v18 or later.\n\n[//]: # 'Requirements'\n\n> [!NOTE] Using TypeScript (`v5.3.x or higher`) is recommended for the best development experience, though not strictly required. We aim to support the last 5 minor versions of TypeScript, but using the latest version will help avoid potential issues.\n\nTanStack Router is currently only compatible with React (with ReactDOM) and Solid. If you're interested in contributing to support other frameworks, such as React Native, Angular, or Vue, please reach out to us on [Discord](https://tlinz.com/discord).\n\n### Download and Install\n\nTo install TanStack Router in your project, run the following command using your preferred package manager:\n\n[//]: # 'installCommand'\n\n```sh\nnpm install @tanstack/router\n# or\npnpm add @tanstack/router\n#or\nyarn add @tanstack/router\n# or\nbun add @tanstack/router\n# or\ndeno add npm:@tanstack/router\n```\n\n[//]: # 'installCommand'\n\nOnce installed, you can verify the installation by checking your `package.json` file for the `@tanstack/router` dependency.\n\n[//]: # 'packageJson'\n\n```json\n{\n  \"dependencies\": {\n    \"@tanstack/react-router\": \"^x.x.x\"\n  }\n}\n```\n\n[//]: # 'packageJson'\n\n## New Project Setup\n\nTo quickly scaffold a new project with TanStack Router, you can use the `create-tsrouter-app` command-line tool. This tool sets up a new React application with TanStack Router pre-configured, allowing you to get started quickly.\n\n> [!TIP] For full details on available options and templates, visit the [`create-tsrouter-app` documentation](https://github.com/TanStack/create-tsrouter-app/tree/main/cli/create-tsrouter-app).\n\nTo create a new project, run the following command in your terminal:\n\n[//]: # 'createAppCommand'\n\n```sh\nnpx create-tsrouter-app@latest\n```\n\n[//]: # 'createAppCommand'\n\nThe CLI will guide you through a short series of prompts to customize your setup, including options for:\n\n[//]: # 'CLIPrompts'\n\n- File-based or code-based route configuration\n- TypeScript support\n- Tailwind CSS integration\n- Toolchain setup\n- Git initialization\n\n[//]: # 'CLIPrompts'\n\nOnce complete, a new React project will be generated with TanStack Router installed and ready to use. All dependencies are automatically installed, so you can jump straight into development:\n\n```sh\ncd your-project-name\nnpm run dev\n```\n\n### Routing Options\n\nTanStack Router supports both file-based and code-based route configurations, allowing you to choose the approach that best fits your workflow.\n\n#### File-Based Route Generation\n\nThe file-based approach is the recommended option for most projects. It automatically creates routes based on your file structure, giving you the best mix of performance, simplicity, and developer experience.\n\nTo create a new project using file-based route generation, run the following command:\n\n[//]: # 'createAppCommandFileBased'\n\n```sh\nnpx create-tsrouter-app@latest my-app --template file-router\n```\n\n[//]: # 'createAppCommandFileBased'\n\nThis command sets up a new directory called `my-app` with everything configured. Once setup completes, you can then start your development server and begin building your application:\n\n```sh\ncd my-app\nnpm run dev\n```\n\n#### Code-Based Route Configuration\n\nIf you prefer to define routes programmatically, you can use the code-based route configuration. This approach gives you full control over routing logic while maintaining the same project scaffolding workflow.\n\n[//]: # 'createAppCommandCodeBased'\n\n```sh\nnpx create-tsrouter-app@latest my-app\n```\n\n[//]: # 'createAppCommandCodeBased'\n\nSimilar to the file-based setup, this command creates a new directory called `my-app` with TanStack Router configured for code-based routing. After setup, navigate to your project directory and start the development server:\n\n```sh\ncd my-app\nnpm run dev\n```\n\nWith either approach, you can now start building your React application with TanStack Router!\n\n# Devtools\n\n> Link, take this sword... I mean Devtools!... to help you on your way!\n\nWave your hands in the air and shout hooray because TanStack Router comes with dedicated devtools! \uD83E\uDD73\n\nWhen you begin your TanStack Router journey, you'll want these devtools by your side. They help visualize all of the inner workings of TanStack Router and will likely save you hours of debugging if you find yourself in a pinch!\n\n## Installation\n\nThe devtools are a separate package that you need to install:\n\n```sh\nnpm install @tanstack/react-router-devtools\n```\n\nor\n\n```sh\npnpm add @tanstack/react-router-devtools\n```\n\nor\n\n```sh\nyarn add @tanstack/react-router-devtools\n```\n\nor\n\n```sh\nbun add @tanstack/react-router-devtools\n```\n\n## Import the Devtools\n\n```js\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n```\n\n## Using Devtools in production\n\nThe Devtools, if imported as `TanStackRouterDevtools` will not be shown in production. If you want to have devtools in an environment with `process.env.NODE_ENV === 'production'`, use instead `TanStackRouterDevtoolsInProd`, which has all the same options:\n\n```tsx\nimport { TanStackRouterDevtoolsInProd } from '@tanstack/react-router-devtools'\n```\n\n## Using inside of the `RouterProvider`\n\nThe easiest way for the devtools to work is to render them inside of your root route (or any other route). This will automatically connect the devtools to the router instance.\n\n```tsx\nconst rootRoute = createRootRoute({\n  component: () => (\n    <>\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... other routes\n])\n\nconst router = createRouter({\n  routeTree,\n})\n\nfunction App() {\n  return <RouterProvider router={router} />\n}\n```\n\n## Manually passing the Router Instance\n\nIf rendering the devtools inside of the `RouterProvider` isn't your cup of tea, a `router` prop for the devtools accepts the same `router` instance you pass to the `Router` component. This makes it possible to place the devtools anywhere on the page, not just inside the provider:\n\n```tsx\nfunction App() {\n  return (\n    <>\n      <RouterProvider router={router} />\n      <TanStackRouterDevtools router={router} />\n    </>\n  )\n}\n```\n\n## Floating Mode\n\nFloating Mode will mount the devtools as a fixed, floating element in your app and provide a toggle in the corner of the screen to show and hide the devtools. This toggle state will be stored and remembered in localStorage across reloads.\n\nPlace the following code as high in your React app as you can. The closer it is to the root of the page, the better it will work!\n\n```js\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nfunction App() {\n  return (\n    <>\n      <Router />\n      <TanStackRouterDevtools initialIsOpen={false} />\n    </>\n  )\n}\n```\n\n### Devtools Options\n\n- `router: Router`\n  - The router instance to connect to.\n- `initialIsOpen: Boolean`\n  - Set this `true` if you want the devtools to default to being open.\n- `panelProps: PropsObject`\n  - Use this to add props to the panel. For example, you can add `className`, `style` (merge and override default style), etc.\n- `closeButtonProps: PropsObject`\n  - Use this to add props to the close button. For example, you can add `className`, `style` (merge and override default style), `onClick` (extend default handler), etc.\n- `toggleButtonProps: PropsObject`\n  - Use this to add props to the toggle button. For example, you can add `className`, `style` (merge and override default style), `onClick` (extend default handler), etc.\n- `position?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"`\n  - Defaults to `bottom-left`.\n  - The position of the TanStack Router logo to open and close the devtools panel.\n- `shadowDOMTarget?: ShadowRoot`\n  - Specifies a Shadow DOM target for the devtools.\n  - By default, devtool styles are applied to the `<head>` tag of the main document (light DOM). When a `shadowDOMTarget` is provided, styles will be applied within this Shadow DOM instead.\n- `containerElement?: string | any`\n  - Use this to render the devtools inside a different type of container element for ally purposes.\n  - Any string which corresponds to a valid intrinsic JSX element is allowed.\n  - Defaults to 'footer'.\n\n## Fixed Mode\n\nTo control the position of the devtools, import the `TanStackRouterDevtoolsPanel`:\n\n```js\nimport { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'\n```\n\nIt can then be attached to provided shadow DOM target:\n\n```js\n<TanStackRouterDevtoolsPanel\n  shadowDOMTarget={shadowContainer}\n  router={router}\n/>\n```\n\nClick [here](https://tanstack.com/router/latest/docs/framework/react/examples/basic-devtools-panel) to see a live example of this in StackBlitz.\n\n## Embedded Mode\n\nEmbedded Mode will embed the devtools as a regular component in your application. You can style it however you'd like after that!\n\n```js\nimport { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'\n\nfunction App() {\n  return (\n    <>\n      <Router router={router} />\n      <TanStackRouterDevtoolsPanel\n        router={router}\n        style={styles}\n        className={className}\n      />\n    </>\n  )\n}\n```\n\n### DevtoolsPanel Options\n\n- `router: Router`\n  - The router instance to connect to.\n- `style: StyleObject`\n  - The standard React style object used to style a component with inline styles.\n- `className: string`\n  - The standard React className property used to style a component with classes.\n- `isOpen?: boolean`\n  - A boolean variable indicating whether the panel is open or closed.\n- `setIsOpen?: (isOpen: boolean) => void`\n  - A function that toggles the open and close state of the panel.\n- `handleDragStart?: (e: any) => void`\n  - Handles the opening and closing the devtools panel.\n- `shadowDOMTarget?: ShadowRoot`\n  - Specifies a Shadow DOM target for the devtools.\n  - By default, devtool styles are applied to the `<head>` tag of the main document (light DOM). When a `shadowDOMTarget` is provided, styles will be applied within this Shadow DOM instead.\n\n# How to Migrate from React Router v7\n\nThis guide provides a step-by-step process to migrate your application from React Router v7 to TanStack Router. We'll cover the complete migration process from removing React Router dependencies to implementing TanStack Router's type-safe routing patterns.\n\n## Quick Start\n\n**Time Required:** 2-4 hours depending on app complexity  \n**Difficulty:** Intermediate  \n**Prerequisites:** Basic React knowledge, existing React Router v7 app\n\n### What You'll Accomplish\n\n- Remove React Router v7 dependencies and components\n- Install and configure TanStack Router\n- Convert route definitions to file-based routing\n- Update navigation components and hooks\n- Implement type-safe routing patterns\n- Handle search params and dynamic routes\n- Migrate from React Router v7's new features to TanStack Router equivalents\n\n---\n\n## Complete Migration Process\n\n### Step 1: Prepare for Migration\n\nBefore making any changes, prepare your environment and codebase:\n\n**1.1 Create a backup branch**\n\n```bash\ngit checkout -b migrate-to-tanstack-router\ngit push -u origin migrate-to-tanstack-router\n```\n\n**1.2 Install TanStack Router (keep React Router temporarily)**\n\n```bash\n# Install TanStack Router\nnpm install @tanstack/react-router\n\n# Install development dependencies\nnpm install -D @tanstack/router-plugin @tanstack/react-router-devtools\n```\n\n**1.3 Set up the router plugin for your bundler**\n\nFor **Vite** users, update your `vite.config.ts`:\n\n```typescript\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { tanstackRouter } from '@tanstack/router-plugin/vite'\n\nexport default defineConfig({\n  plugins: [\n    tanstackRouter(), // Add this before react plugin\n    react(),\n  ],\n})\n```\n\nFor **other bundlers**, see our [bundler configuration guides](../routing/).\n\n### Step 2: Create TanStack Router Configuration\n\n**2.1 Create router configuration file**\n\nCreate `tsr.config.json` in your project root:\n\n```json\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\",\n  \"quoteStyle\": \"single\"\n}\n```\n\n**2.2 Create routes directory**\n\n```bash\nmkdir src/routes\n```\n\n### Step 3: Convert Your React Router v7 Structure\n\n**3.1 Identify your current React Router v7 setup**\n\nReact Router v7 introduced several new patterns. Look for:\n\n- `createBrowserRouter` with new data APIs\n- Framework mode configurations\n- Server-side rendering setup\n- New `loader` and `action` functions\n- `defer` usage (simplified in v7)\n- Type-safe routing features\n\n**3.2 Create root route**\n\nCreate `src/routes/__root.tsx`:\n\n```typescript\nimport { createRootRoute, Link, Outlet } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nexport const Route = createRootRoute({\n  component: () => (\n    <>\n      {/* Your existing layout/navbar content */}\n      <div className=\"p-2 flex gap-2\">\n        <Link to=\"/\" className=\"[&.active]:font-bold\">\n          Home\n        </Link>\n        <Link to=\"/about\" className=\"[&.active]:font-bold\">\n          About\n        </Link>\n      </div>\n      <hr />\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n```\n\n**3.3 Create index route**\n\nCreate `src/routes/index.tsx` for your home page:\n\n```typescript\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/')({\n  component: Index,\n})\n\nfunction Index() {\n  return (\n    <div className=\"p-2\">\n      <h3>Welcome Home!</h3>\n    </div>\n  )\n}\n```\n\n**3.4 Convert React Router v7 loaders**\n\nReact Router v7 simplified loader patterns. Here's how to migrate them:\n\n**React Router v7:**\n\n```typescript\n// app/routes/posts.tsx\nexport async function loader() {\n  const posts = await fetchPosts()\n  return { posts } // v7 removed need for json() wrapper\n}\n\nexport default function Posts() {\n  const { posts } = useLoaderData()\n  return <div>{/* render posts */}</div>\n}\n```\n\n**TanStack Router equivalent:**\nCreate `src/routes/posts.tsx`:\n\n```typescript\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts')({\n  loader: async () => {\n    const posts = await fetchPosts()\n    return { posts }\n  },\n  component: Posts,\n})\n\nfunction Posts() {\n  const { posts } = Route.useLoaderData()\n  return <div>{/* render posts */}</div>\n}\n```\n\n**3.5 Convert dynamic routes**\n\n**React Router v7:**\n\n```typescript\n// app/routes/posts.$postId.tsx\nexport async function loader({ params }) {\n  const post = await fetchPost(params.postId)\n  return { post }\n}\n\nexport default function Post() {\n  const { post } = useLoaderData()\n  return <div>{post.title}</div>\n}\n```\n\n**TanStack Router equivalent:**\nCreate `src/routes/posts/$postId.tsx`:\n\n```typescript\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params }) => {\n    const post = await fetchPost(params.postId)\n    return { post }\n  },\n  component: Post,\n})\n\nfunction Post() {\n  const { post } = Route.useLoaderData()\n  const { postId } = Route.useParams()\n  return <div>{post.title}</div>\n}\n```\n\n**3.6 Convert React Router v7 actions**\n\n**React Router v7:**\n\n```typescript\nexport async function action({ request, params }) {\n  const formData = await request.formData()\n  const result = await updatePost(params.postId, formData)\n  return { success: true }\n}\n```\n\n**TanStack Router equivalent:**\n\n```typescript\nexport const Route = createFileRoute('/posts/$postId/edit')({\n  component: EditPost,\n  // Actions are typically handled differently in TanStack Router\n  // Use mutations or form libraries like React Hook Form\n})\n\nfunction EditPost() {\n  const navigate = useNavigate()\n\n  const handleSubmit = async (formData) => {\n    const result = await updatePost(params.postId, formData)\n    navigate({ to: '/posts/$postId', params: { postId } })\n  }\n\n  return <form onSubmit={handleSubmit}>{/* form */}</form>\n}\n```\n\n### Step 4: Handle React Router v7 Framework Features\n\n**4.1 Server-Side Rendering Migration**\n\nReact Router v7 introduced framework mode with SSR. If you're using this:\n\n**React Router v7 Framework Mode:**\n\n```typescript\n// react-router.config.ts\nexport default {\n  ssr: true,\n  prerender: ['/'],\n}\n```\n\n**TanStack Router approach:**\n\nTanStack Router has built-in SSR capabilities. Set up your router for SSR:\n\n```typescript\n// src/router.tsx\nimport { createRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nconst router = createRouter({\n  routeTree,\n  context: {\n    // Add any SSR context here\n  },\n})\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nexport { router }\n```\n\nFor server-side rendering, use TanStack Router's built-in SSR APIs:\n\n```typescript\n// server.tsx\nimport { createMemoryHistory } from '@tanstack/react-router'\nimport { StartServer } from '@tanstack/start/server'\n\nexport async function render(url: string) {\n  const router = createRouter({\n    routeTree,\n    history: createMemoryHistory({ initialEntries: [url] }),\n  })\n\n  await router.load()\n\n  return (\n    <StartServer router={router} />\n  )\n}\n```\n\n**4.2 Code Splitting Migration**\n\nReact Router v7 improved code splitting. TanStack Router handles this via lazy routes:\n\n**React Router v7:**\n\n```typescript\nconst LazyComponent = lazy(() => import('./LazyComponent'))\n```\n\n**TanStack Router:**\n\n```typescript\nimport { createLazyFileRoute } from '@tanstack/react-router'\n\nexport const Route = createLazyFileRoute('/lazy-route')({\n  component: LazyComponent,\n})\n\nfunction LazyComponent() {\n  return <div>Lazy loaded!</div>\n}\n```\n\n### Step 5: Update Navigation Components\n\n**5.1 Update Link components**\n\n**React Router v7:**\n\n```typescript\nimport { Link } from 'react-router'\n\n<Link to=\"/posts/123\">View Post</Link>\n<Link to=\"/posts\" state={{ from: 'home' }}>Posts</Link>\n```\n\n**TanStack Router:**\n\n```typescript\nimport { Link } from '@tanstack/react-router'\n\n<Link to=\"/posts/$postId\" params={{ postId: '123' }}>View Post</Link>\n<Link to=\"/posts\" state={{ from: 'home' }}>Posts</Link>\n```\n\n**5.2 Update navigation hooks**\n\n**React Router v7:**\n\n```typescript\nimport { useNavigate } from 'react-router'\n\nfunction Component() {\n  const navigate = useNavigate()\n\n  const handleClick = () => {\n    navigate('/posts/123')\n  }\n}\n```\n\n**TanStack Router:**\n\n```typescript\nimport { useNavigate } from '@tanstack/react-router'\n\nfunction Component() {\n  const navigate = useNavigate()\n\n  const handleClick = () => {\n    navigate({ to: '/posts/$postId', params: { postId: '123' } })\n  }\n}\n```\n\n### Step 6: Handle React Router v7 Specific Features\n\n**6.1 Migrate simplified `defer` usage**\n\nReact Router v7 simplified defer by removing the wrapper function:\n\n**React Router v7:**\n\n```typescript\nexport async function loader() {\n  return {\n    data: fetchData(), // Promise directly returned\n  }\n}\n```\n\n**TanStack Router:**\n\nTanStack Router uses a different approach for deferred data. Use loading states:\n\n```typescript\nexport const Route = createFileRoute('/deferred')({\n  loader: async () => {\n    const data = await fetchData()\n    return { data }\n  },\n  pendingComponent: () => <div>Loading...</div>,\n  component: DeferredComponent,\n})\n```\n\n**6.2 Handle React Router v7's enhanced type safety**\n\nReact Router v7 improved type inference. TanStack Router provides even better type safety:\n\n```typescript\n// TanStack Router automatically infers types\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params }) => {\n    // params.postId is automatically typed as string\n    const post = await fetchPost(params.postId)\n    return { post }\n  },\n  component: Post,\n})\n\nfunction Post() {\n  // post is automatically typed based on loader return\n  const { post } = Route.useLoaderData()\n  // postId is automatically typed as string\n  const { postId } = Route.useParams()\n}\n```\n\n### Step 7: Update Your Main Router Setup\n\n**7.1 Replace React Router v7 router creation**\n\n**Before (React Router v7):**\n\n```typescript\nimport { createBrowserRouter, RouterProvider } from 'react-router'\n\nconst router = createBrowserRouter([\n  // Your route definitions\n])\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n)\n```\n\n**After (TanStack Router):**\n\n```typescript\nimport { RouterProvider } from '@tanstack/react-router'\nimport { router } from './router'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n)\n```\n\n### Step 8: Handle Search Parameters\n\n**8.1 React Router v7 to TanStack Router search params**\n\n**React Router v7:**\n\n```typescript\nimport { useSearchParams } from 'react-router'\n\nfunction Component() {\n  const [searchParams, setSearchParams] = useSearchParams()\n  const page = searchParams.get('page') || '1'\n\n  const updatePage = (newPage) => {\n    setSearchParams({ page: newPage })\n  }\n}\n```\n\n**TanStack Router:**\n\n```typescript\nimport { createFileRoute } from '@tanstack/react-router'\nimport { z } from 'zod'\n\nconst searchSchema = z.object({\n  page: z.number().catch(1),\n  filter: z.string().optional(),\n})\n\nexport const Route = createFileRoute('/posts')({\n  validateSearch: searchSchema,\n  component: Posts,\n})\n\nfunction Posts() {\n  const navigate = useNavigate({ from: '/posts' })\n  const { page, filter } = Route.useSearch()\n\n  const updatePage = (newPage: number) => {\n    navigate({ search: (prev) => ({ ...prev, page: newPage }) })\n  }\n}\n```\n\n### Step 9: Remove React Router Dependencies\n\nOnly after everything is working with TanStack Router:\n\n**9.1 Remove React Router v7**\n\n```bash\nnpm uninstall react-router\n```\n\n**9.2 Clean up unused imports**\n\nSearch your codebase for any remaining React Router imports:\n\n```bash\n# Find remaining React Router imports\ngrep -r \"react-router\" src/\n```\n\nRemove any remaining imports and replace with TanStack Router equivalents.\n\n### Step 10: Add Advanced Type Safety\n\n**10.1 Configure strict TypeScript**\n\nUpdate your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noUncheckedIndexedAccess\": true\n  }\n}\n```\n\n**10.2 Add search parameter validation**\n\nFor routes with search parameters, add validation schemas:\n\n```typescript\nimport { createFileRoute } from '@tanstack/react-router'\nimport { z } from 'zod'\n\nconst postsSearchSchema = z.object({\n  page: z.number().min(1).catch(1),\n  search: z.string().optional(),\n  category: z.enum(['tech', 'business', 'lifestyle']).optional(),\n})\n\nexport const Route = createFileRoute('/posts')({\n  validateSearch: postsSearchSchema,\n  component: Posts,\n})\n```\n\n---\n\n## Production Checklist\n\nBefore deploying your migrated application:\n\n### Router Configuration\n\n- [ ] Router instance created and properly exported\n- [ ] Route tree generated successfully\n- [ ] TypeScript declarations registered\n- [ ] All route files follow naming conventions\n\n### Route Migration\n\n- [ ] All React Router v7 routes converted to file-based routing\n- [ ] Dynamic routes updated with proper parameter syntax\n- [ ] Nested routes maintain hierarchy\n- [ ] Index routes created where needed\n- [ ] Layout routes preserve component structure\n\n### Feature Migration\n\n- [ ] All React Router v7 loaders converted\n- [ ] Actions migrated to appropriate patterns\n- [ ] Server-side rendering configured (if applicable)\n- [ ] Code splitting implemented\n- [ ] Type safety enhanced\n\n### Navigation Updates\n\n- [ ] All Link components updated to TanStack Router\n- [ ] useNavigate hooks replaced and tested\n- [ ] Navigation parameters properly typed\n- [ ] Search parameter validation implemented\n\n### Code Cleanup\n\n- [ ] React Router v7 dependencies removed\n- [ ] Unused imports cleaned up\n- [ ] No React Router references remain\n- [ ] TypeScript compilation successful\n- [ ] All tests passing\n\n### Testing\n\n- [ ] All routes accessible and rendering correctly\n- [ ] Navigation between routes working\n- [ ] Back/forward browser buttons functional\n- [ ] Search parameters persisting correctly\n- [ ] Dynamic routes with parameters working\n- [ ] Nested route layouts displaying properly\n- [ ] Framework features (SSR, code splitting) working if applicable\n\n---\n\n## Common Problems\n\n### Error: \"Cannot use useNavigate outside of context\"\n\n**Problem:** You have remaining React Router imports that conflict with TanStack Router.\n\n**Solution:**\n\n1. Search for all React Router imports:\n   ```bash\n   grep -r \"react-router\" src/\n   ```\n2. Replace all imports with TanStack Router equivalents\n3. Ensure React Router is completely uninstalled\n\n### TypeScript Errors: Route Parameters\n\n**Problem:** TypeScript showing errors about route parameters not being typed correctly.\n\n**Solution:**\n\n1. Ensure your router is registered in the TypeScript module declaration:\n   ```typescript\n   declare module '@tanstack/react-router' {\n     interface Register {\n       router: typeof router\n     }\n   }\n   ```\n2. Check that your route files export the Route correctly\n3. Verify parameter names match between route definition and usage\n\n### React Router v7 Framework Features Not Working\n\n**Problem:** Missing SSR or code splitting functionality after migration.\n\n**Solution:**\n\n1. TanStack Router has built-in SSR capabilities - use TanStack Start for full-stack applications\n2. Use TanStack Router's lazy routes for code splitting\n3. Configure SSR using TanStack Router's native APIs\n4. Follow the [SSR setup guide](../setup-ssr.md) for detailed instructions\n\n### Routes Not Matching\n\n**Problem:** Routes not rendering or 404 errors for valid routes.\n\n**Solution:**\n\n1. Check file naming follows TanStack Router conventions:\n   - Dynamic routes: `$paramName.tsx`\n   - Index routes: `index.tsx`\n   - Nested routes: proper directory structure\n2. Verify route tree generation is working\n3. Check that the router plugin is properly configured\n\n### React Router v7 Simplified APIs Not Translating\n\n**Problem:** v7's simplified `defer` or other features don't have direct equivalents.\n\n**Solution:**\n\n1. Use TanStack Router's pending states for loading UX\n2. Implement data fetching patterns that fit TanStack Router's architecture\n3. Leverage TanStack Router's superior type safety for better DX\n\n---\n\n## React Router v7 vs TanStack Router Feature Comparison\n\n| Feature            | React Router v7     | TanStack Router              |\n| ------------------ | ------------------- | ---------------------------- |\n| Type Safety        | Good                | Excellent                    |\n| File-based Routing | Framework mode only | Built-in                     |\n| Search Params      | Basic               | Validated with schemas       |\n| Code Splitting     | Good                | Excellent with lazy routes   |\n| SSR                | Framework mode      | Built-in with TanStack Start |\n| Bundle Size        | Larger              | Smaller                      |\n| Learning Curve     | Moderate            | Moderate                     |\n| Community          | Large               | Growing                      |\n\n---\n\n## Common Next Steps\n\nAfter successfully migrating to TanStack Router, consider these enhancements:\n\n### Advanced Features to Explore\n\n- **Route-based code splitting** - Improve performance with lazy loading\n- **Search parameter validation** - Type-safe URL state management\n- **Route preloading** - Enhance perceived performance\n- **Route masking** - Advanced URL management\n- **Integration with TanStack Query** - Powerful data fetching\n\n---\n\n## Related Resources\n\n- [TanStack Router Documentation](https://tanstack.com/router) - Complete API reference\n- [File-Based Routing Guide](../../routing/file-based-routing.md) - Detailed routing concepts\n- [Navigation Guide](../../guide/navigation.md) - Complete navigation patterns\n- [Search Parameters Guide](../../guide/search-params.md) - Advanced search param usage\n- [Type Safety Guide](../../guide/type-safety.md) - TypeScript integration details\n- [React Router v7 Changelog](https://reactrouter.com/start/changelog) - What changed in v7\n\n# Migration from React Location\n\nBefore you begin your journey in migrating from React Location, it's important that you have a good understanding of the [Routing Concepts](../routing/routing-concepts.md) and [Design Decisions](../decisions-on-dx.md) used by TanStack Router.\n\n## Differences between React Location and TanStack Router\n\nReact Location and TanStack Router share much of same design decisions concepts, but there are some key differences that you should be aware of.\n\n- React Location uses _generics_ to infer types for routes, while TanStack Router uses _module declaration merging_ to infer types.\n- Route configuration in React Location is done using a single array of route definitions, while in TanStack Router, route configuration is done using a tree of route definitions starting with the [root route](../routing/routing-concepts.md#the-root-route).\n- [File-based routing](../routing/file-based-routing.md) is the recommended way to define routes in TanStack Router, while React Location only allows you to define routes in a single file using a code-based approach.\n  - TanStack Router does support a [code-based approach](../routing/code-based-routing.md) to defining routes, but it is not recommended for most use cases. You can read more about why, over here: [why is file-based routing the preferred way to define routes?](../decisions-on-dx.md#3-why-is-file-based-routing-the-preferred-way-to-define-routes)\n\n## Migration guide\n\nIn this guide we'll go over the process of migrating the [React Location Basic example](https://github.com/TanStack/router/tree/react-location/examples/basic) over to TanStack Router using file-based routing, with the end goal of having the same functionality as the original example (styling and other non-routing related code will be omitted).\n\n> [!TIP]\n> To use a code-based approach for defining your routes, you can read the [code-based Routing](../routing/code-based-routing.md) guide.\n\n### Step 1: Swap over to TanStack Router's dependencies\n\nFirst, we need to install the dependencies for TanStack Router. For detailed installation instructions, see our [How to Install TanStack Router](../how-to/install.md) guide.\n\n```sh\nnpm install @tanstack/react-router @tanstack/router-devtools\n```\n\nAnd remove the React Location dependencies.\n\n```sh\nnpm uninstall @tanstack/react-location @tanstack/react-location-devtools\n```\n\n### Step 2: Use the file-based routing watcher\n\nIf your project uses Vite (or one of the supported bundlers), you can use the TanStack Router plugin to watch for changes in your routes files and automatically update the routes configuration.\n\nInstallation of the Vite plugin:\n\n```sh\nnpm install -D @tanstack/router-plugin\n```\n\nAnd add it to your `vite.config.js`:\n\n```js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { tanstackRouter } from '@tanstack/router-plugin/vite'\n\nexport default defineConfig({\n  // ...\n  plugins: [tanstackRouter(), react()],\n})\n```\n\nHowever, if your application does not use Vite, you use one of our other [supported bundlers](../routing/file-based-routing.md#getting-started-with-file-based-routing), or you can use the `@tanstack/router-cli` package to watch for changes in your routes files and automatically update the routes configuration.\n\n### Step 3: Add the file-based configuration file to your project\n\nCreate a `tsr.config.json` file in the root of your project with the following content:\n\n```json\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\"\n}\n```\n\nYou can find the full list of options for the `tsr.config.json` file [here](../../../api/file-based-routing.md).\n\n### Step 4: Create the routes directory\n\nCreate a `routes` directory in the `src` directory of your project.\n\n```sh\nmkdir src/routes\n```\n\n### Step 5: Create the root route file\n\n```tsx\n// src/routes/__root.tsx\nimport { createRootRoute, Outlet, Link } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/router-devtools'\n\nexport const Route = createRootRoute({\n  component: () => {\n    return (\n      <>\n        <div>\n          <Link to=\"/\" activeOptions={{ exact: true }}>\n            Home\n          </Link>\n          <Link to=\"/posts\">Posts</Link>\n        </div>\n        <hr />\n        <Outlet />\n        <TanStackRouterDevtools />\n      </>\n    )\n  },\n})\n```\n\n### Step 6: Create the index route file\n\n```tsx\n// src/routes/index.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/')({\n  component: Index,\n})\n```\n\n> You will need to move any related components and logic needed for the index route from the `src/index.tsx` file to the `src/routes/index.tsx` file.\n\n### Step 7: Create the posts route file\n\n```tsx\n// src/routes/posts.tsx\nimport { createFileRoute, Link, Outlet } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts')({\n  component: Posts,\n  loader: async () => {\n    const posts = await fetchPosts()\n    return {\n      posts,\n    }\n  },\n})\n\nfunction Posts() {\n  const { posts } = Route.useLoaderData()\n  return (\n    <div>\n      <nav>\n        {posts.map((post) => (\n          <Link\n            key={post.id}\n            to={`/posts/$postId`}\n            params={{ postId: post.id }}\n          >\n            {post.title}\n          </Link>\n        ))}\n      </nav>\n      <Outlet />\n    </div>\n  )\n}\n```\n\n> You will need to move any related components and logic needed for the posts route from the `src/index.tsx` file to the `src/routes/posts.tsx` file.\n\n### Step 8: Create the posts index route file\n\n```tsx\n// src/routes/posts.index.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/')({\n  component: PostsIndex,\n})\n```\n\n> You will need to move any related components and logic needed for the posts index route from the `src/index.tsx` file to the `src/routes/posts.index.tsx` file.\n\n### Step 9: Create the posts id route file\n\n```tsx\n// src/routes/posts.$postId.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  component: PostsId,\n  loader: async ({ params: { postId } }) => {\n    const post = await fetchPost(postId)\n    return {\n      post,\n    }\n  },\n})\n\nfunction PostsId() {\n  const { post } = Route.useLoaderData()\n  // ...\n}\n```\n\n> You will need to move any related components and logic needed for the posts id route from the `src/index.tsx` file to the `src/routes/posts.$postId.tsx` file.\n\n### Step 10: Generate the route tree\n\nIf you are using one of the supported bundlers, the route tree will be generated automatically when you run the dev script.\n\nIf you are not using one of the supported bundlers, you can generate the route tree by running the following command:\n\n```sh\nnpx tsr generate\n```\n\n### Step 11: Update the main entry file to render the Router\n\nOnce you've generated the route-tree, you can then update the `src/index.tsx` file to create the router instance and render it.\n\n```tsx\n// src/index.tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createRouter, RouterProvider } from '@tanstack/react-router'\n\n// Import the generated route tree\nimport { routeTree } from './routeTree.gen'\n\n// Create a new router instance\nconst router = createRouter({ routeTree })\n\n// Register the router instance for type safety\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nconst domElementId = 'root' // Assuming you have a root element with the id 'root'\n\n// Render the app\nconst rootElement = document.getElementById(domElementId)\nif (!rootElement) {\n  throw new Error(`Element with id ${domElementId} not found`)\n}\n\nReactDOM.createRoot(rootElement).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n)\n```\n\n### Finished!\n\nYou should now have successfully migrated your application from React Location to TanStack Router using file-based routing.\n\nReact Location also has a few more features that you might be using in your application. Here are some guides to help you migrate those features:\n\n- [Search params](../guide/search-params.md)\n- [Data loading](../guide/data-loading.md)\n- [History types](../guide/history-types.md)\n- [Wildcard / Splat / Catch-all routes](../routing/routing-concepts.md#splat--catch-all-routes)\n- [Authenticated routes](../guide/authenticated-routes.md)\n\nTanStack Router also has a few more features that you might want to explore:\n\n- [Router Context](../guide/router-context.md)\n- [Preloading](../guide/preloading.md)\n- [Pathless Layout Routes](../routing/routing-concepts.md#pathless-layout-routes)\n- [Route masking](../guide/route-masking.md)\n- [SSR](../guide/ssr.md)\n- ... and more!\n\nIf you are facing any issues or have any questions, feel free to ask for help in the TanStack Discord.\n\n# Frequently Asked Questions\n\nWelcome to the TanStack Router FAQ! Here you'll find answers to common questions about the TanStack Router. If you have a question that isn't answered here, please feel free to ask in the [TanStack Discord](https://tlinz.com/discord).\n\n## Why should you choose TanStack Router over another router?\n\nTo answer this question, it's important to view the other options in the space. There are many alternatives to choose from, but only a couple that are widely adopted and actively maintained:\n\n- **Next.js** - Widely regarded as the leading framework for starting new React projects. Its design focuses on performance, development workflows, and cutting-edge technology. The framework's APIs and abstractions, while powerful, can sometimes present as non-standard. Rapid growth and industry adoption have resulted in a feature-rich experience, sometimes leading to a steeper learning curve and increased overhead.\n- **Remix / React Router** - Based on the historically successful React Router, Remix delivers a powerful developer and user experience. Its API and architectural vision are firmly rooted in web standards such as Request/Response, with an emphasis on adaptability across various JavaScript environments. Many of its APIs and abstractions are well-designed and have influenced more than a few of TanStack Router's APIs. However, its rigid design, the integration of type safety as an add-on, and sometimes strict adherence to platform APIs can present limitations for some developers.\n\nThese frameworks and routers have their strengths, but they also come with trade-offs that may not align with every project's needs. TanStack Router aims to strike a balance by offering routing APIs designed to improve the developer experience without sacrificing flexibility or performance.\n\n## Is TanStack Router a framework?\n\nTanStack Router itself is not a \"framework\" in the traditional sense, since it doesn't address a few other common full-stack concerns. However, TanStack Router has been designed to be upgradable to a full-stack framework when used in conjunction with other tools that address bundling, deployments, and server-side-specific functionality. This is why we are currently developing [TanStack Start](https://tanstack.com/start), a full-stack framework that is built on top of TanStack Router and Vite.\nFor a deeper dive on the history of TanStack Router, feel free to read [TanStack Router's History](../decisions-on-dx.md#tanstack-routers-origin-story).\n\n## Should I commit my `routeTree.gen.ts` file into git?\n\nYes! Although the route tree file (i.e., `routeTree.gen.ts`) is generated by TanStack Router, it is essentially part of your application\u2019s runtime, not a build artifact. The route tree file is a critical part of your application\u2019s source code, and it is used by TanStack Router to build your application\u2019s routes at runtime.\n\nYou should commit this file into git so that other developers can use it to build your application.\n\n## Can I conditionally render the Root Route component?\n\nNo, the root route is always rendered as it is the entry point of your application.\n\nIf you need to conditionally render a route's component, this usually means that the page content needs to be different based on some condition (e.g. user authentication). For this use case, you should use a [Layout Route](../routing/routing-concepts.md#layout-routes) or a [Pathless Layout Route](../routing/routing-concepts.md#pathless-layout-routes) to conditionally render the content.\n\nYou can restrict access to these routes using a conditional check in the `beforeLoad` function of the route.\n\n<details>\n<summary>What does this look like?</summary>\n\n```tsx\n// src/routes/_pathless-layout.tsx\nimport { createFileRoute, Outlet } from '@tanstack/react-router'\nimport { isAuthenticated } from '../utils/auth'\n\nexport const Route = createFileRoute('/_pathless-layout', {\n  beforeLoad: async () => {\n    // Check if the user is authenticated\n    const authed = await isAuthenticated()\n    if (!authed) {\n      // Redirect the user to the login page\n      return '/login'\n    }\n  },\n  component: PathlessLayoutRouteComponent,\n  // ...\n})\n\nfunction PathlessLayoutRouteComponent() {\n  return (\n    <div>\n      <h1>You are authed</h1>\n      <Outlet />\n    </div>\n  )\n}\n```\n\n</details>\n\n";
export default _default;
